import { NextRequest, NextResponse } from "next/server";
import { db } from "@/lib/db";
import { chats, flashcards } from "@/lib/db/schema";
import { eq } from "drizzle-orm";
import fs from "fs";
import pdfParse from "pdf-parse";
import { downloadFromS3 } from "@/lib/db/s3-server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
const systemPrompt = You are a helpful assistant that generates flashcards from text.
Your task is to create flashcards based on the provided text. Each flashcard should have a question and an answer.
The flashcards should be in JSON format with the following structure:
{
  "flashcards": [
    {

      "front": "Question 1",
      "back": "Answer 1"
    },
    {
      "front": "Question 2",
      "back": "Answer 2"
    }
  ]
};

export async function POST(req: Request) {
  try {
    const { chatId } = await req.json();
    console.log("[INFO] Received chatId:", chatId);

    // 1. Get chat record
    const chat = await db
      .select()
      .from(chats)
      .where(eq(chats.id, chatId))
      .then((res) => res[0]);

    if (!chat) {
      console.error("[ERROR] Chat not found for ID:", chatId);
      return NextResponse.json({ error: "Chat not found" }, { status: 404 });
    }

    console.log("[INFO] Found chat:", chat);

    // 2. Download file from S3
    const fileKey = chat.fileKey;

    const filePath = await downloadFromS3(fileKey);
    console.log("📂 Downloaded filePath:", filePath);

    if (!filePath) {
      console.error("❌ Failed to download PDF from S3");
      return NextResponse.json(
        { error: "Failed to download PDF" },
        { status: 500 }
      );
    }

    const pdfBuffer = fs.readFileSync(filePath);
    const pdfData = await pdfParse(pdfBuffer);
    const pdfText = pdfData.text;
    console.log("📜 Extracted PDF text length:", pdfText.length);

    const promptText = pdfText.slice(0, 4000);
    console.log("🧠 Sending to OpenAI:", promptText.slice(0, 200)); // just preview

    const response = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: Text:\n${promptText} },
      ],
    });

    const content = response.choices[0].message.content;
    console.log("🤖 OpenAI response:", content);

    const flashcardJSON = JSON.parse(content || "{}");
    if (!flashcardJSON.flashcards) {
      console.error("❌ No flashcards found in OpenAI response");
      return NextResponse.json(
        { error: "Failed to generate flashcards" },
        { status: 500 }
      );
    }

    await db.insert(flashcards).values(
      flashcardJSON.flashcards.map((card: any) => ({
        front: card.front,
        back: card.back,
        chatId,
      }))
    );

    console.log("✅ Flashcards successfully inserted to DB");
    return NextResponse.json({ success: true });
  } catch (err) {
    console.error("🔥 Flashcard generation failed:", err);
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    );
  }
}